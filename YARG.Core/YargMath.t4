<#@ template hostspecific="false" language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#
var intTypes = new string[] {
    "int",
    "uint",
    // Not necessary currently, uncomment and re-generate if needed
    // "long",
    // "ulong",
};

var percentTypes = new (string name, string suffix)[] {
    ("float", "F"),
    ("double", "D"),
};

var types = intTypes.Concat(percentTypes.Select((val) => val.name));
#>
namespace YARG.Core
{
    public static class YargMath
    {
        #region Lerp
<#
foreach (var (percentType, _) in percentTypes)
{
    foreach (var inputType in types)
    {
#>
        public static <#= inputType #> Lerp(<#= inputType #> start, <#= inputType #> end, <#= percentType #> percent)
        {
            return (<#= inputType #>) (start + (end - start) * percent);
        }

<#
    }
}

foreach (var (percentType, percentSuffix) in percentTypes)
{
    foreach (var inputType in types)
    {
#>
        public static <#= percentType #> Lerp<#= percentSuffix #>(<#= inputType #> start, <#= inputType #> end, <#= percentType #> percent)
        {
            return (<#= percentType #>) (start + (end - start) * percent);
        }

<#
    }
}
#>
        #endregion

        #region InverseLerp
<#
foreach (var (percentType, percentSuffix) in percentTypes)
{
    foreach (var inputType in types)
    {
#>
        public static <#= percentType #> InverseLerp<#= percentSuffix #>(<#= inputType #> start, <#= inputType #> end, <#= inputType #> value)
        {
            if (start == end)
                return value < start ? 0 : 1;

            return (<#= percentType #>) (value - start) / (<#= percentType #>) (end - start);
        }

<#
    }
}
#>
        #endregion
    }
}